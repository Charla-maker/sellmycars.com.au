// Prisma Schema for SellMyCars CMS
// This schema is designed to be production-ready with proper indexes and relations

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// USER MANAGEMENT & AUTHENTICATION
// ============================================

enum UserRole {
  ADMIN
  EDITOR
  VIEWER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

model User {
  id            String     @id @default(cuid())
  email         String     @unique
  name          String
  password      String     // Hashed with bcrypt
  role          UserRole   @default(VIEWER)
  status        UserStatus @default(ACTIVE)
  avatar        String?

  // Audit fields
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  lastLoginAt   DateTime?

  // Relations
  pages         Page[]
  posts         Post[]
  media         Media[]
  sessions      Session[]

  @@index([email])
  @@index([role])
  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

// ============================================
// CONTENT MANAGEMENT - PAGES
// ============================================

enum PageStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
  ARCHIVED
}

model Page {
  id          String     @id @default(cuid())
  title       String
  slug        String     @unique
  content     String     @default("") // Rich text content
  excerpt     String?

  // SEO Fields
  metaTitle       String?
  metaDescription String?
  metaKeywords    String?
  ogImage         String?

  // Publishing
  status          PageStatus @default(DRAFT)
  publishedAt     DateTime?
  scheduledFor    DateTime?

  // Hierarchy
  parentId        String?
  parent          Page?      @relation("PageHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children        Page[]     @relation("PageHierarchy")

  // Layout & Template
  template        String     @default("default")
  featuredImage   String?

  // Audit
  authorId        String
  author          User       @relation(fields: [authorId], references: [id])
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  // Version Control
  version         Int        @default(1)
  revisions       PageRevision[]

  @@index([slug])
  @@index([status])
  @@index([authorId])
  @@index([publishedAt])
  @@map("pages")
}

model PageRevision {
  id          String   @id @default(cuid())
  pageId      String
  page        Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)

  title       String
  content     String
  version     Int

  createdAt   DateTime @default(now())
  createdBy   String

  @@index([pageId])
  @@map("page_revisions")
}

// ============================================
// CONTENT MANAGEMENT - BLOG POSTS
// ============================================

enum PostStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
  ARCHIVED
}

model Post {
  id              String     @id @default(cuid())
  title           String
  slug            String     @unique
  content         String     @default("") // Rich text content
  excerpt         String?

  // SEO Fields
  metaTitle       String?
  metaDescription String?
  metaKeywords    String?
  ogImage         String?

  // Publishing
  status          PostStatus @default(DRAFT)
  publishedAt     DateTime?
  scheduledFor    DateTime?

  // Blog specific
  featuredImage   String?
  readTime        Int?       // Minutes
  viewCount       Int        @default(0)

  // Taxonomy
  categories      Category[]
  tags            Tag[]

  // Audit
  authorId        String
  author          User       @relation(fields: [authorId], references: [id])
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  @@index([slug])
  @@index([status])
  @@index([authorId])
  @@index([publishedAt])
  @@map("posts")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?

  posts       Post[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([slug])
  @@map("categories")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique

  posts     Post[]

  createdAt DateTime @default(now())

  @@index([slug])
  @@map("tags")
}

// ============================================
// MEDIA LIBRARY
// ============================================

enum MediaType {
  IMAGE
  VIDEO
  DOCUMENT
  AUDIO
  OTHER
}

model Media {
  id          String    @id @default(cuid())
  filename    String
  originalName String
  mimeType    String
  size        Int       // Bytes
  type        MediaType

  // Storage
  url         String
  thumbnailUrl String?

  // Image specific
  width       Int?
  height      Int?

  // Organization
  folder      String?
  alt         String?
  caption     String?

  // Audit
  uploadedBy  String
  uploader    User      @relation(fields: [uploadedBy], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([type])
  @@index([uploadedBy])
  @@index([folder])
  @@map("media")
}

// ============================================
// FORM SUBMISSIONS
// ============================================

enum SubmissionStatus {
  NEW
  READ
  REPLIED
  SPAM
  ARCHIVED
}

model FormSubmission {
  id          String           @id @default(cuid())

  // Form Data
  name        String
  email       String
  phone       String?
  make        String?
  model       String?
  year        String?
  condition   String?
  message     String?

  // Metadata
  ipAddress   String?
  userAgent   String?
  source      String?          // Which page/form

  // Processing
  status      SubmissionStatus @default(NEW)
  notes       String?

  // Audit
  submittedAt DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([status])
  @@index([email])
  @@index([submittedAt])
  @@map("form_submissions")
}

// ============================================
// SITE SETTINGS & CONFIGURATION
// ============================================

model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String   // JSON stringified value
  type      String   // string, number, boolean, json, etc.
  group     String   // general, seo, email, integrations, etc.

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([key])
  @@index([group])
  @@map("settings")
}

// ============================================
// ANALYTICS & TRACKING
// ============================================

model PageView {
  id          String   @id @default(cuid())
  path        String
  referrer    String?
  userAgent   String?
  ipAddress   String?

  sessionId   String?

  createdAt   DateTime @default(now())

  @@index([path])
  @@index([createdAt])
  @@map("page_views")
}

model ConversionEvent {
  id          String   @id @default(cuid())
  eventType   String   // form_submit, phone_click, etc.
  eventData   String?  // JSON stringified data

  source      String?
  medium      String?
  campaign    String?

  createdAt   DateTime @default(now())

  @@index([eventType])
  @@index([createdAt])
  @@map("conversion_events")
}
